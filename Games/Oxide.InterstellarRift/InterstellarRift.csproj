<?xml version="1.0" encoding="utf-8"?>
<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
  <PropertyGroup>
    <Version>2.0.0.0</Version>
    <AssemblyName>Oxide.InterstellarRift</AssemblyName>
    <Authors>Oxide and Contributors</Authors>
    <Description>Interstellar Rift extension for the Oxide modding framework</Description>
    <RepositoryUrl>https://github.com/OxideMod/Oxide.InterstellarRift</RepositoryUrl>
    <PackageLicenseUrl>https://github.com/OxideMod/Oxide.InterstellarRift/blob/develop/LICENSE.md</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/OxideMod/Oxide.InterstellarRift</PackageProjectUrl>
    <PackageIconUrl>https://avatars1.githubusercontent.com/u/10712027?s=64</PackageIconUrl>
    <Copyright>Copyright (c) 2014-$([System.DateTime]::Now.Year) $(Authors)</Copyright>
    <PackageTags>gaming modding plugins dotnet</PackageTags>
    <PlatformTarget>x86</PlatformTarget>
    <TargetFramework>net45</TargetFramework>
    <BundleDir>$(SolutionDir)Bundles</BundleDir>
    <GameName>InterstellarRift</GameName>
    <ManagedDir>Build</ManagedDir>
    <SteamAppId>363360</SteamAppId>
    <SteamBranch>public</SteamBranch>
    <SteamLogin>required</SteamLogin>
  </PropertyGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\Extensions\Oxide.CSharp\CSharp.csproj">
      <Name>CSharp</Name>
    </ProjectReference>
    <ProjectReference Include="..\..\Extensions\Oxide.Unity\Unity.csproj">
      <Name>Unity</Name>
    </ProjectReference>
    <ProjectReference Include="..\..\Oxide.Core\Core.csproj">
      <Name>Core</Name>
    </ProjectReference>
    <Reference Include="Oxide.References">
      <HintPath>..\..\Oxide.References\$(OutputPath)Merged\Oxide.References.dll</HintPath>
    </Reference>
    <Reference Include="AlunaNetFramework">
      <HintPath>..\Dependencies\$(PackageId)\$(ManagedDir)\AlunaNetFramework.dll</HintPath>
    </Reference>
    <Reference Include="IR">
      <HintPath>..\Dependencies\$(PackageId)\$(ManagedDir)\IR.exe</HintPath>
    </Reference>
    <Compile Remove="InterstellarRiftCommands.cs" /> <!-- Remove when ready -->
    <None Remove="DepotDownloader.config" />
    <None Remove="Files\**" />
    <None Remove="Patched\**" />
  </ItemGroup>
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
  <Target Name="Clean">
    <RemoveDir Directories="$(BundleDir)\$(GameName); $(SolutionDir)Games\Dependencies\$(PackageId)" />
  </Target>
  <Target Name="Build" Condition="('$(STEAM_USERNAME)' != '' And '$(STEAM_PASSWORD)' != '') Or Exists('$(SolutionDir).steamlogin')" DependsOnTargets="$(BuildDependsOn)" Returns="$(TargetPath)" />
  <Target Name="ChangeAliasesOfStrongNameAssemblies" BeforeTargets="FindReferenceAssembliesForReferences;ResolveReferences">
    <ItemGroup>
      <ReferencePath Condition="'%(FileName)' == 'Oxide.References'">
        <Aliases>Oxide</Aliases>
      </ReferencePath>
    </ItemGroup>
  </Target>
  <Target Name="BeforeBuild">
    <!-- Currently only works on Windows due to Windows-only tools used -->
    <Exec Command="powershell -ExecutionPolicy Bypass $(SolutionDir)Steam.ps1 -project $(AssemblyName) -dotnet $(TargetFramework) -appid $(SteamAppId) -branch '$(SteamBranch)' -managed '$(ManagedDir)' -access $(SteamLogin)" />
  </Target>
  <Target Name="AfterBuild">
    <ItemGroup>
      <GameFiles Include="$(ProjectDir)Files\**\*.*" />
      <ManagedFiles Include="$(SolutionDir)Games\Dependencies\$(PackageId)\$(ManagedDir)\IR.exe; $(SolutionDir)Games\Dependencies\$(PackageId)\$(ManagedDir)\*_Original.exe" />
      <ManagedFiles Include="$(SolutionDir)Extensions\Oxide.CSharp\$(OutputPath)Oxide.CSharp.dll" />
      <ManagedFiles Include="$(SolutionDir)Extensions\Oxide.CSharp\Dependencies\**\*.*" />
      <ManagedFiles Include="$(SolutionDir)Extensions\Oxide.MySql\$(OutputPath)Oxide.MySql.dll" />
      <ManagedFiles Include="$(SolutionDir)Extensions\Oxide.MySql\Dependencies\**\*.*" />
      <ManagedFiles Include="$(SolutionDir)Extensions\Oxide.SQLite\$(OutputPath)Oxide.SQLite.dll" />
      <ManagedFiles Include="$(SolutionDir)Extensions\Oxide.SQLite\Dependencies\**\*.*" />
      <ManagedFiles Include="$(SolutionDir)Oxide.Core\$(OutputPath)Oxide.*.dll" />
      <ManagedFiles Include="$(SolutionDir)Oxide.References\Dependencies\**\*.*" Exclude="$(SolutionDir)Oxide.References\Dependencies\Mono.Posix.dll; $(SolutionDir)Oxide.References\Dependencies\protobuf-net.dll" />
      <ManagedFiles Include="$(TargetDir)$(AssemblyName).dll" />
    </ItemGroup>
    <!--<Exec Command="pdb2mdb %(ManagedFiles.Identity)" Condition="'$(Configuration)' == 'Debug' And '$(OS)' == 'Windows_NT'" IgnoreExitCode="true" />-->
    <Copy SourceFiles="@(GameFiles)" DestinationFiles="@(GameFiles->'$(BundleDir)\$(GameName)\%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(ManagedFiles)" DestinationFiles="@(ManagedFiles->'$(BundleDir)\$(GameName)\$(ManagedDir)\%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(PackageFiles)" DestinationFiles="@(PackageFiles->'$(BundleDir)\$(GameName)\$(ManagedDir)\%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(PatchedFiles)" DestinationFiles="@(PatchedFiles->'$(BundleDir)\$(GameName)\$(ManagedDir)\%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>
  <Target Name="LocalDeploy" AfterTargets="AfterBuild" Condition="Exists('$(ProjectDir).deploy')">
    <Exec Command="start /b /wait taskkill /f /im IR.exe /fi &quot;memusage gt 2&quot;" Condition="'$(OS)' == 'Windows_NT'" />
    <Exec Command="start /b /wait taskkill /f /im CSharpCompiler.exe /fi &quot;memusage gt 2&quot;" Condition="'$(OS)' == 'Windows_NT'" />
    <ReadLinesFromFile File="$(ProjectDir).deploy">
      <Output PropertyName="DeployPath" TaskParameter="Lines" />
    </ReadLinesFromFile>
    <ItemGroup>
      <DeployFiles Include="$(BundleDir)\$(GameName)\**\*.*" />
    </ItemGroup>
    <Copy Condition="'$(DeployPath)' != ''" SourceFiles="@(DeployFiles)" DestinationFiles="@(DeployFiles->'$(DeployPath)\%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>
  <Target Name="NuGetPack" AfterTargets="AfterBuild" Condition="'$(Appveyor)' == 'True' Or '$(LocalDev)' == 'True'">
    <Exec Command="dotnet pack $(MSBuildProjectFile) --no-build -c $(Configuration)" />
    <ItemGroup>
      <NugetPackages Include="$(ProjectDir)bin\$(Configuration)\*.nupkg" />
    </ItemGroup>
    <Copy SourceFiles="@(NugetPackages)" DestinationFolder="$(UserProfile)\.nuget\packages\$(PackageId)\$(PackageVersion)" />
  </Target>
</Project>
